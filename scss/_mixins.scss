/* // âœ… Figma Proportions: Maintains the same proportions as the Figma design.

// // Here's a SCSS mixin that dynamically calculates font-size, line-height, padding, margins, and other scalable properties across desktop, tablet, and mobile screens.
// âœ… Consistent Scaling: No need to manually adjust for medium screens.
// âœ… Reusable: Works for font-size, line-height, margins, paddings, etc.
// âœ… Automatic Scaling: Dynamically scales values based on the screen size.

// ðŸ“Œ How to Use It
// Import the mixins in your SCSS file: @import "~responsive-scale-mixins/scss/mixins";
// .title {
//   @include responsive-scale(font-size, 40, 24);
//   @include responsive-scale(padding, 20 73, 8 16); // Multi-value
//   @include responsive-scale(line-height, 65, 40);

//   // Letter-spacing is -1.5% of font-size
//   @include responsive-scale(letter-spacing, -1.5, -1.5, px, true, 40, 24);
// }

// Parameters: property, desktop-value, mobile-value, unit (default px), is-percentage (default false), desktop-relative, mobile-relative, important (default null)
// Pass values as numbers (e.g., 20 for 20px, 20 73 for 20px 73px).
// Tablet values are automatically interpolated using the tablet-proportion-scale-factor.
// For percentage-based values, provide the percentage for desktop and mobile, and the base values (e.g., font-size for letter-spacing).
// Pass " !important" as the important parameter to append !important to the generated CSS rules.
// Media queries: Desktop (default), Tablet (768-991px), Mobile (â‰¤767px). */

@function scaled-value($val, $scale-var, $unit: px) {
  @if $scale-var == "--computed-scale-factor" {
    @return calc(100vw / var(--desktop-width) * #{$val}#{$unit});
  } @else if $scale-var == "--computed-tablet-scale-factor" {
    @return calc(100vw / var(--tablet-width) * #{$val}#{$unit});
  } @else if $scale-var == "--computed-mobile-scale-factor" {
    @return calc(100vw / var(--mobile-width) * #{$val}#{$unit});
  } @else {
    @return calc(var(#{$scale-var}) * #{$val}#{$unit});
  }
}

@function get-scale-factor($unit) {
  // Use generic scale factor - unit is appended in calc expressions
  @return unquote("--computed-scale-factor");
}

@function get-tablet-scale-factor($unit) {
  // Use generic scale factor - unit is appended in calc expressions
  @return unquote("--computed-tablet-scale-factor");
}

@function get-mobile-scale-factor($unit) {
  // Use generic scale factor - unit is appended in calc expressions
  @return unquote("--computed-mobile-scale-factor");
}

@mixin responsive-scale(
  $property,
  $desktop-value,
  $mobile-value,
  $unit: px,
  $is-percentage: false,
  $desktop-relative: null,
  $mobile-relative: null,
  $important: null
) {
  $scale-factor: get-scale-factor($unit);

  // If it's a percentage-based value (like letter-spacing), scale it based on the relative property
  @if $is-percentage == true {
    @if $desktop-relative != null {
      $calc-value: calc(
        #{$desktop-value} /
          100 *
          100vw /
          var(--desktop-width) *
          #{$desktop-relative} *
          #{$unit}
      );
      #{$property}: #{$calc-value}#{$important};
    }

    @media screen and (min-width: 768px) and (max-width: 991px) {
      @if $desktop-relative != null and $mobile-relative != null {
        $calc-value: calc(
          #{$mobile-value} /
            100 *
            (
              100vw /
                var(--tablet-width) *
                (
                  #{$mobile-relative} +
                    (100vw - var(--mobile-width)) /
                    (var(--desktop-width) - var(--mobile-width)) *
                    (#{$desktop-relative} - #{$mobile-relative})
                ) *
                #{$unit}
            )
        );
        #{$property}: #{$calc-value}#{$important};
      }
    }

    @media screen and (max-width: 767px) {
      @if $mobile-relative != null {
        $calc-value: calc(
          #{$mobile-value} /
            100 *
            100vw /
            var(--mobile-width) *
            #{$mobile-relative} *
            #{$unit}
        );
        #{$property}: #{$calc-value}#{$important};
      }
    }
  } @else {
    // Regular absolute scaling
    @if type-of($desktop-value) == list {
      $desktop-scaled: ();
      @each $val in $desktop-value {
        $desktop-scaled: append(
          $desktop-scaled,
          scaled-value($val, $scale-factor, $unit)
        );
      }
      #{$property}: #{$desktop-scaled}#{$important};
    } @else {
      $scaled-value: scaled-value($desktop-value, $scale-factor, $unit);
      #{$property}: #{$scaled-value}#{$important};
    }

    @media screen and (min-width: 768px) and (max-width: 991px) {
      @if type-of($desktop-value) == list {
        $tablet-scaled: ();
        @for $i from 1 through length($desktop-value) {
          $d-val: nth($desktop-value, $i);
          $m-val: nth($mobile-value, $i);
          $tablet-scaled: append(
            $tablet-scaled,
            calc(
              100vw /
                var(--tablet-width) *
                (
                  #{$m-val} +
                    (100vw - var(--mobile-width)) /
                    (var(--desktop-width) - var(--mobile-width)) *
                    (#{$d-val} - #{$m-val})
                ) *
                #{$unit}
            )
          );
        }
        #{$property}: #{$tablet-scaled}#{$important};
      } @else {
        $calc-value: calc(
          100vw /
            var(--tablet-width) *
            (
              #{$mobile-value} +
                (100vw - var(--mobile-width)) /
                (var(--desktop-width) - var(--mobile-width)) *
                (#{$desktop-value} - #{$mobile-value})
            ) *
            #{$unit}
        );
        #{$property}: #{$calc-value}#{$important};
      }
    }

    @media screen and (max-width: 767px) {
      $mobile-scale-factor: get-mobile-scale-factor($unit);
      @if type-of($mobile-value) == list {
        $mobile-scaled: ();
        @each $val in $mobile-value {
          $mobile-scaled: append(
            $mobile-scaled,
            scaled-value($val, $mobile-scale-factor, $unit)
          );
        }
        #{$property}: #{$mobile-scaled}#{$important};
      } @else {
        $scaled-value: scaled-value($mobile-value, $mobile-scale-factor, $unit);
        #{$property}: #{$scaled-value}#{$important};
      }
    }
  }
}
